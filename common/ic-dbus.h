/*
 * Generated by gdbus-codegen 2.40.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __IC_DBUS_H__
#define __IC_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.tizen.iotcon.dbus */

#define IC_TYPE_DBUS (ic_dbus_get_type ())
#define IC_DBUS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), IC_TYPE_DBUS, icDbus))
#define IC_IS_DBUS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), IC_TYPE_DBUS))
#define IC_DBUS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), IC_TYPE_DBUS, icDbusIface))

struct _icDbus;
typedef struct _icDbus icDbus;
typedef struct _icDbusIface icDbusIface;

struct _icDbusIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_bind_interface) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint arg_resource,
    gint arg_iface);

  gboolean (*handle_bind_resource) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint arg_parent,
    gint arg_child);

  gboolean (*handle_bind_type) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint arg_resource,
    const gchar *arg_type);

  gboolean (*handle_delete) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_client,
    const gchar *arg_sig_name);

  gboolean (*handle_find_resource) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_host_address,
    const gchar *arg_type,
    const gchar *arg_sig_name);

  gboolean (*handle_get) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_client,
    GVariant *arg_query,
    const gchar *arg_sig_name);

  gboolean (*handle_get_device_info) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_host_address,
    const gchar *arg_sig_name);

  gboolean (*handle_notify_all) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint arg_resource);

  gboolean (*handle_notify_list_of_observers) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint arg_resource,
    GVariant *arg_notify_msg,
    GVariant *arg_observers);

  gboolean (*handle_observer_start) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_client,
    gint arg_observe_type,
    GVariant *arg_query,
    const gchar *arg_sig_name);

  gboolean (*handle_observer_stop) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint arg_observe_h);

  gboolean (*handle_post) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_client,
    const gchar *arg_repr,
    GVariant *arg_query,
    const gchar *arg_sig_name);

  gboolean (*handle_put) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_client,
    const gchar *arg_repr,
    GVariant *arg_query,
    const gchar *arg_sig_name);

  gboolean (*handle_register_device_info) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_device_info);

  gboolean (*handle_register_resource) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uri,
    const gchar *const *arg_resource_types,
    gint arg_ifaces,
    guchar arg_properties);

  gboolean (*handle_send_response) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_response);

  gboolean (*handle_start_presence) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    guint arg_time_to_live);

  gboolean (*handle_stop_presence) (
    icDbus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_subscribe_presence) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_host_address,
    const gchar *arg_type,
    const gchar *arg_sig_name);

  gboolean (*handle_unbind_resource) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint arg_parent,
    gint arg_child);

  gboolean (*handle_unregister_resource) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint arg_resource);

  gboolean (*handle_unsubscribe_presence) (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint arg_presence_h);

};

GType ic_dbus_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *ic_dbus_interface_info (void);
guint ic_dbus_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void ic_dbus_complete_register_resource (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint resource);

void ic_dbus_complete_unregister_resource (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_bind_interface (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_bind_type (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_bind_resource (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_unbind_resource (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_notify_list_of_observers (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_notify_all (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_send_response (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_find_resource (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_get (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_put (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_post (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_delete (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_observer_start (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint observe_h,
    gint ret);

void ic_dbus_complete_observer_stop (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_register_device_info (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_get_device_info (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_subscribe_presence (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint presence_h);

void ic_dbus_complete_unsubscribe_presence (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_start_presence (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void ic_dbus_complete_stop_presence (
    icDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);



/* D-Bus method calls: */
void ic_dbus_call_register_resource (
    icDbus *proxy,
    const gchar *arg_uri,
    const gchar *const *arg_resource_types,
    gint arg_ifaces,
    guchar arg_properties,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_register_resource_finish (
    icDbus *proxy,
    gint *out_resource,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_register_resource_sync (
    icDbus *proxy,
    const gchar *arg_uri,
    const gchar *const *arg_resource_types,
    gint arg_ifaces,
    guchar arg_properties,
    gint *out_resource,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_unregister_resource (
    icDbus *proxy,
    gint arg_resource,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_unregister_resource_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_unregister_resource_sync (
    icDbus *proxy,
    gint arg_resource,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_bind_interface (
    icDbus *proxy,
    gint arg_resource,
    gint arg_iface,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_bind_interface_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_bind_interface_sync (
    icDbus *proxy,
    gint arg_resource,
    gint arg_iface,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_bind_type (
    icDbus *proxy,
    gint arg_resource,
    const gchar *arg_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_bind_type_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_bind_type_sync (
    icDbus *proxy,
    gint arg_resource,
    const gchar *arg_type,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_bind_resource (
    icDbus *proxy,
    gint arg_parent,
    gint arg_child,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_bind_resource_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_bind_resource_sync (
    icDbus *proxy,
    gint arg_parent,
    gint arg_child,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_unbind_resource (
    icDbus *proxy,
    gint arg_parent,
    gint arg_child,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_unbind_resource_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_unbind_resource_sync (
    icDbus *proxy,
    gint arg_parent,
    gint arg_child,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_notify_list_of_observers (
    icDbus *proxy,
    gint arg_resource,
    GVariant *arg_notify_msg,
    GVariant *arg_observers,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_notify_list_of_observers_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_notify_list_of_observers_sync (
    icDbus *proxy,
    gint arg_resource,
    GVariant *arg_notify_msg,
    GVariant *arg_observers,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_notify_all (
    icDbus *proxy,
    gint arg_resource,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_notify_all_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_notify_all_sync (
    icDbus *proxy,
    gint arg_resource,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_send_response (
    icDbus *proxy,
    GVariant *arg_response,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_send_response_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_send_response_sync (
    icDbus *proxy,
    GVariant *arg_response,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_find_resource (
    icDbus *proxy,
    const gchar *arg_host_address,
    const gchar *arg_type,
    const gchar *arg_sig_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_find_resource_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_find_resource_sync (
    icDbus *proxy,
    const gchar *arg_host_address,
    const gchar *arg_type,
    const gchar *arg_sig_name,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_get (
    icDbus *proxy,
    GVariant *arg_client,
    GVariant *arg_query,
    const gchar *arg_sig_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_get_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_get_sync (
    icDbus *proxy,
    GVariant *arg_client,
    GVariant *arg_query,
    const gchar *arg_sig_name,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_put (
    icDbus *proxy,
    GVariant *arg_client,
    const gchar *arg_repr,
    GVariant *arg_query,
    const gchar *arg_sig_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_put_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_put_sync (
    icDbus *proxy,
    GVariant *arg_client,
    const gchar *arg_repr,
    GVariant *arg_query,
    const gchar *arg_sig_name,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_post (
    icDbus *proxy,
    GVariant *arg_client,
    const gchar *arg_repr,
    GVariant *arg_query,
    const gchar *arg_sig_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_post_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_post_sync (
    icDbus *proxy,
    GVariant *arg_client,
    const gchar *arg_repr,
    GVariant *arg_query,
    const gchar *arg_sig_name,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_delete (
    icDbus *proxy,
    GVariant *arg_client,
    const gchar *arg_sig_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_delete_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_delete_sync (
    icDbus *proxy,
    GVariant *arg_client,
    const gchar *arg_sig_name,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_observer_start (
    icDbus *proxy,
    GVariant *arg_client,
    gint arg_observe_type,
    GVariant *arg_query,
    const gchar *arg_sig_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_observer_start_finish (
    icDbus *proxy,
    gint *out_observe_h,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_observer_start_sync (
    icDbus *proxy,
    GVariant *arg_client,
    gint arg_observe_type,
    GVariant *arg_query,
    const gchar *arg_sig_name,
    gint *out_observe_h,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_observer_stop (
    icDbus *proxy,
    gint arg_observe_h,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_observer_stop_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_observer_stop_sync (
    icDbus *proxy,
    gint arg_observe_h,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_register_device_info (
    icDbus *proxy,
    GVariant *arg_device_info,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_register_device_info_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_register_device_info_sync (
    icDbus *proxy,
    GVariant *arg_device_info,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_get_device_info (
    icDbus *proxy,
    const gchar *arg_host_address,
    const gchar *arg_sig_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_get_device_info_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_get_device_info_sync (
    icDbus *proxy,
    const gchar *arg_host_address,
    const gchar *arg_sig_name,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_subscribe_presence (
    icDbus *proxy,
    const gchar *arg_host_address,
    const gchar *arg_type,
    const gchar *arg_sig_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_subscribe_presence_finish (
    icDbus *proxy,
    gint *out_presence_h,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_subscribe_presence_sync (
    icDbus *proxy,
    const gchar *arg_host_address,
    const gchar *arg_type,
    const gchar *arg_sig_name,
    gint *out_presence_h,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_unsubscribe_presence (
    icDbus *proxy,
    gint arg_presence_h,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_unsubscribe_presence_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_unsubscribe_presence_sync (
    icDbus *proxy,
    gint arg_presence_h,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_start_presence (
    icDbus *proxy,
    guint arg_time_to_live,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_start_presence_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_start_presence_sync (
    icDbus *proxy,
    guint arg_time_to_live,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_call_stop_presence (
    icDbus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_call_stop_presence_finish (
    icDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_call_stop_presence_sync (
    icDbus *proxy,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define IC_TYPE_DBUS_PROXY (ic_dbus_proxy_get_type ())
#define IC_DBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), IC_TYPE_DBUS_PROXY, icDbusProxy))
#define IC_DBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), IC_TYPE_DBUS_PROXY, icDbusProxyClass))
#define IC_DBUS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), IC_TYPE_DBUS_PROXY, icDbusProxyClass))
#define IC_IS_DBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), IC_TYPE_DBUS_PROXY))
#define IC_IS_DBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), IC_TYPE_DBUS_PROXY))

typedef struct _icDbusProxy icDbusProxy;
typedef struct _icDbusProxyClass icDbusProxyClass;
typedef struct _icDbusProxyPrivate icDbusProxyPrivate;

struct _icDbusProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  icDbusProxyPrivate *priv;
};

struct _icDbusProxyClass
{
  GDBusProxyClass parent_class;
};

GType ic_dbus_proxy_get_type (void) G_GNUC_CONST;

void ic_dbus_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
icDbus *ic_dbus_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
icDbus *ic_dbus_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void ic_dbus_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
icDbus *ic_dbus_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
icDbus *ic_dbus_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define IC_TYPE_DBUS_SKELETON (ic_dbus_skeleton_get_type ())
#define IC_DBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), IC_TYPE_DBUS_SKELETON, icDbusSkeleton))
#define IC_DBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), IC_TYPE_DBUS_SKELETON, icDbusSkeletonClass))
#define IC_DBUS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), IC_TYPE_DBUS_SKELETON, icDbusSkeletonClass))
#define IC_IS_DBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), IC_TYPE_DBUS_SKELETON))
#define IC_IS_DBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), IC_TYPE_DBUS_SKELETON))

typedef struct _icDbusSkeleton icDbusSkeleton;
typedef struct _icDbusSkeletonClass icDbusSkeletonClass;
typedef struct _icDbusSkeletonPrivate icDbusSkeletonPrivate;

struct _icDbusSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  icDbusSkeletonPrivate *priv;
};

struct _icDbusSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType ic_dbus_skeleton_get_type (void) G_GNUC_CONST;

icDbus *ic_dbus_skeleton_new (void);


G_END_DECLS

#endif /* __IC_DBUS_H__ */
